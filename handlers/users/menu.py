import sqlite3

from aiogram import types
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardRemove
from loader import dp, db
from udemy_course.keyboards.default import markupmenu, markupRetro, markupSprint
from udemy_course.states import ReScrum
from udemy_course.utils.db_api import Database

db = Database()
@dp.message_handler(Command("menu"))
async def show_menu(message: types.Message):
    users = db.select_all_tg_id()
    users = [user[0] for user in users]
    user_id = message.from_user.id
    regis = bool(True)
    isregisted = bool(db.select_isregis(user_id))

    if user_id in users:
        if regis == isregisted:
            await message.answer(
                "–í—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é : ",
                reply_markup=ReplyKeyboardRemove(),
            )
            await ReScrum.Q1.set()
        else:
            await message.answer("–í—ã —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω—ã ")
            await message.answer(
                "–ü—Ä–æ—à—É –≤—ã–±–∞—Ä–∏—Ç–µ –∏–∑ –º–µ–Ω—å—é –≤—Å–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ", reply_markup=markupmenu
            )

    else:
        await message.answer("–í–∞—à–∞ id –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!!!")


@dp.message_handler(text="Sprint")
async def get_Sprint2(message: types.Message):
    db.create_table_Sprint()
    await message.answer("üìÖ", reply_markup=markupSprint)


@dp.message_handler(text="üì∫–†–µ—Ç—Ä–æ")
async def get_Retro(message: types.Message):
    await message.answer("üì∫", reply_markup=markupRetro)


@dp.message_handler(text="‚óÄÔ∏è–ù–∞–∑–∞–¥")
async def get_Retro(message: types.Message):
    await message.answer("‚óÄÔ∏è", reply_markup=markupmenu)
